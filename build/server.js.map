{"version":3,"sources":["../server.js"],"names":["dbCon","connection","getConnection","stringify","require","express","cors","bodyParser","app","use","static","corsOptions","origin","optionsSuccessStatus","jsonParser","json","get","req","resp","response","sql","query","err","result","outputs","end","index","getBasic","getBasicById","post","saveResearchOutput","listen","console","log"],"mappings":";;AACA;;AACA;;AACA;;AACA;AACA,MAAMA,QAAQ,0BAAd,C,CALA;;AAMA,MAAMC,aAAaD,MAAME,aAAN,EAAnB;AACA;AACA,MAAMC,YAAYC,QAAQ,qBAAR,CAAlB;AACA,MAAMC,UAAUD,QAAQ,SAAR,CAAhB,C,CAAoC;AACpC,MAAME,OAAOF,QAAQ,MAAR,CAAb,C,CAA8B;AAC9B,MAAMG,aAAaH,QAAQ,aAAR,CAAnB;;AAGA,MAAMI,MAAMH,SAAZ;AACA;AACAG,IAAIC,GAAJ,CAAQJ,QAAQK,MAAR,CAAe,QAAf,CAAR,E,CAAmC;AACnCF,IAAIC,GAAJ,CAAQH,MAAR,E,CAAiB;;AAEjB,MAAMK,cAAc;AAChBC,YAAQ,uBADQ;AAEhBC,0BAAsB,GAFN,CAEU;AAFV,CAApB;AAIA,MAAMC,aAAaP,WAAWQ,IAAX,EAAnB;AACA;AACAP,IAAIQ,GAAJ,CAAQ,yBAAR,EAAmCV,KAAKK,WAAL,CAAnC,EACA,CAACM,GAAD,EAAMC,IAAN,KAAe;AAAE;AACb,UAAMC,WAAW,EAAjB;AACA,UAAMC,MAAM,qEACZ,kDADY,GAEZ,mEAFY,GAGZ,mEAHY,GAIZ,wCAJY,GAKR,kFALJ;AAMAnB,eAAWoB,KAAX,CAAiBD,GAAjB,EAAsB,CAACE,GAAD,EAAMC,MAAN,KAAiB;AACnC,YAAID,GAAJ,EAAS,MAAMA,GAAN;AACTH,iBAASK,OAAT,GAAmBD,MAAnB;AACAL,aAAKO,GAAL,CAAStB,UAAUgB,QAAV,EAAoB,IAApB,EAA0B,CAA1B,CAAT;AACH,KAJD;AAKH,CAdD;;AAgBAX,IAAIQ,GAAJ,CAAQ,OAAR,EAAiB,CAACC,GAAD,EAAMC,IAAN,KAAe;AAC7B,uCAAeQ,KAAf,CAAqBT,GAArB,EAA0BC,IAA1B;AACF,CAFD;;AAIAV,IAAIQ,GAAJ,CAAQ,QAAR,EAAkB,CAACC,GAAD,EAAMC,IAAN,KAAe;AAC/B,uDAAyBS,QAAzB,CAAkCV,GAAlC,EAAuCC,IAAvC;AACD,CAFD;;AAIAV,IAAIQ,GAAJ,CAAQ,oBAAR,EACA,CAACC,GAAD,EAAMC,IAAN,KAAe;AACb,uDAAyBU,YAAzB,CAAsCX,GAAtC,EAA2CC,IAA3C;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CAlBD;AAmBAV,IAAIqB,IAAJ,CAAS,UAAT,EAAqBf,UAArB,EAAiC,CAACG,GAAD,EAAMC,IAAN,KAAe;AAC9C,uDAAyBY,kBAAzB,CAA4Cb,GAA5C,EAAiDC,IAAjD;AACD,CAFD;AAGAV,IAAIuB,MAAJ,CAAW,IAAX,EAAiB,MAAM;AACrBC,YAAQC,GAAR,CAAY,wCAAZ;AACD,CAFD","file":"server.js","sourcesContent":["//imports\r\nimport { DBcon } from './db_connection';\r\nimport { homeController } from './controllers/homePageController';\r\nimport { ResearchOutputController } from './controllers/researchOutputController';\r\n//database connection\r\nconst dbCon = new DBcon();\r\nconst connection = dbCon.getConnection();\r\n//other required modules\r\nconst stringify = require('json-stringify-safe');\r\nconst express = require('express'); //for converting circular objects to json\r\nconst cors = require('cors'); //cross-site orign\r\nconst bodyParser = require('body-parser');\r\n\r\n\r\nconst app = express();\r\n//middlewares\r\napp.use(express.static('public')); //serve static files\r\napp.use(cors()); //enables all cors requests\r\n\r\nconst corsOptions = {\r\n    origin: 'http://localhost:8080',\r\n    optionsSuccessStatus: 200 // some legacy browsers (IE11, various SmartTVs) choke on 204\r\n};\r\nconst jsonParser = bodyParser.json();\r\n//routes\r\napp.get('/basic-research-outputs', cors(corsOptions),\r\n(req, resp) => { //returns all research outputs.\r\n    const response = {};\r\n    const sql = 'select research_outputs.ro_id as id,title,type,publication_year,' +\r\n    'additional_info,first_name as Author_First_Name ' +\r\n    ', last_name as Author_Last_Name from users INNER JOIN authors ON ' +\r\n    'users.user_id = authors.author_id INNER JOIN research_outputs ON ' +\r\n    ' research_outputs.ro_id=authors.ro_id ' +\r\n        'INNER JOIN research_types ON  research_outputs.ro_type  = research_types.type_id';\r\n    connection.query(sql, (err, result) => {\r\n        if (err) throw err;\r\n        response.outputs = result;\r\n        resp.end(stringify(response, null, 1));\r\n    });\r\n});\r\n\r\napp.get('/home', (req, resp) => {\r\n   homeController.index(req, resp);\r\n});\r\n\r\napp.get('/basic', (req, resp) => {\r\n  ResearchOutputController.getBasic(req, resp);\r\n});\r\n\r\napp.get('/detailed_view/:id',\r\n(req, resp) => {\r\n  ResearchOutputController.getBasicById(req, resp);\r\n    // let researchDetails = null;\r\n    // const queryString = 'select research_outputs.ro_id as id, ' +\r\n    // 'title, type, publication_year, additional_info, ' +\r\n    // 'proof_link, research_types.type as type, users.first_name AS Author_First_Name, ' +\r\n    // 'users.last_name AS Author_Last_Name from research_outputs  ' +\r\n    //     'JOIN research_types ON ro_type = type_id ' +\r\n    //     'JOIN authors ON authors.ro_id = research_outputs.ro_id JOIN users ON ' +\r\n    //     'users.user_id = authors.author_id WHERE research_outputs.ro_id = ?';\r\n    //\r\n    // connection.query(queryString, [req.params.id],\r\n    //   (err, result) => {\r\n    //     if (err) throw err;\r\n    //     researchDetails = result;\r\n    //     res.end(stringify(researchDetails, null, 1));\r\n    // });\r\n});\r\napp.post('/outputs', jsonParser, (req, resp) => {\r\n  ResearchOutputController.saveResearchOutput(req, resp);\r\n});\r\napp.listen(3000, () => {\r\n  console.log('server started: listening at port:3000');\r\n});\r\n"]}