{"version":3,"sources":["../server.js"],"names":["express","require","cors","bodyParser","app","use","static","corsOptions","origin","optionsSuccessStatus","jsonParser","json","get","req","resp","getBasic","getBasicById","post","saveResearchOutput","deleteById","getUsers","getAuthors","loginUser","saveNode","getDetailedInformation","createMember","userRecyclingBin","retrieveResearch","listen","console","log"],"mappings":";;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;AAPA;AAQA,MAAMA,UAAUC,QAAQ,SAAR,CAAhB,C,CAAoC;AACpC,MAAMC,OAAOD,QAAQ,MAAR,CAAb,C,CAA8B;AAC9B,MAAME,aAAaF,QAAQ,aAAR,CAAnB;;AAEA,MAAMG,MAAMJ,SAAZ,C,CAAuB;AACvB;AACAI,IAAIC,GAAJ,CAAQL,QAAQM,MAAR,CAAe,QAAf,CAAR,E,CAAmC;AACnCF,IAAIC,GAAJ,CAAQH,MAAR,E,CAAiB;;AAEjB,MAAMK,cAAc;AAChBC,UAAQ,uBADQ;AAEhBC,wBAAsB,GAFN,CAEU;AAFV,CAApB;AAIA,MAAMC,aAAaP,WAAWQ,IAAX,EAAnB,C,CAAsC;AACtC;AAC4B;AAC5B;;AAEA;AACAP,IAAIQ,GAAJ,CAAQ,yBAAR,EAAmCV,KAAKK,WAAL,CAAnC,EACA,CAACM,GAAD,EAAMC,IAAN,KAAe;AAAE;AACf,qDAAyBC,QAAzB,CAAkCF,GAAlC,EAAuCC,IAAvC;AACD,CAHD;AAIA;AACAV,IAAIQ,GAAJ,CAAQ,4BAAR,EACA,CAACC,GAAD,EAAMC,IAAN,KAAe;AACb,qDAAyBE,YAAzB,CAAsCH,GAAtC,EAA2CC,IAA3C;AACD,CAHD;AAIA;AACAV,IAAIa,IAAJ,CAAS,UAAT,EAAqBP,UAArB,EAAiC,CAACG,GAAD,EAAMC,IAAN,KAAe;AAC9C,qDAAyBI,kBAAzB,CAA4CL,GAA5C,EAAiDC,IAAjD;AACD,CAFD;;AAIA;AACAV,IAAIQ,GAAJ,CAAQ,sBAAR,EACA,CAACC,GAAD,EAAMC,IAAN,KAAe;AACb,qDAAyBK,UAAzB,CAAoCN,GAApC,EAAyCC,IAAzC;AACD,CAHD;AAIA;AACAV,IAAIQ,GAAJ,CAAQ,YAAR,EAAsB,CAACC,GAAD,EAAMC,IAAN,KAAe;AACnC,iCAAeM,QAAf,CAAwBP,GAAxB,EAA6BC,IAA7B;AACD,CAFD;AAGAV,IAAIQ,GAAJ,CAAQ,cAAR,EAAwB,CAACC,GAAD,EAAMC,IAAN,KAAe;AACrC,iCAAeO,UAAf,CAA0BR,GAA1B,EAA+BC,IAA/B;AACD,CAFD;AAGA;AACAV,IAAIa,IAAJ,CAAS,QAAT,EAAmBP,UAAnB,EAA+B,CAACG,GAAD,EAAMC,IAAN,KAAe;AAC5C,mCAAgBQ,SAAhB,CAA0BT,GAA1B,EAA+BC,IAA/B;AACD,CAFD;AAGAV,IAAIa,IAAJ,CAAS,cAAT,EAAyBP,UAAzB,EAAqC,CAACG,GAAD,EAAMC,IAAN,KAAe;AAClD,iCAAeS,QAAf,CAAwBV,GAAxB,EAA6BC,IAA7B;AACD,CAFD;AAGA;AACAV,IAAIQ,GAAJ,CAAQ,+BAAR,EACA,CAACC,GAAD,EAAMC,IAAN,KAAe;AACb,qDAAyBU,sBAAzB,CAAgDX,GAAhD,EAAqDC,IAArD;AACD,CAHD;AAIA;AACAV,IAAIa,IAAJ,CAAS,iBAAT,EAA4BP,UAA5B,EAAwC,CAACG,GAAD,EAAMC,IAAN,KAAe;AACrD,+CAAsBW,YAAtB,CAAmCZ,GAAnC,EAAwCC,IAAxC;AACD,CAFD;AAGA;AACAV,IAAIQ,GAAJ,CAAQ,yBAAR,EAAmC,CAACC,GAAD,EAAMC,IAAN,KAAe;AAChD,iDAAuBY,gBAAvB,CAAwCb,GAAxC,EAA6CC,IAA7C;AACD,CAFD;AAGA;AACAV,IAAIQ,GAAJ,CAAQ,wBAAR,EAAkC,CAACC,GAAD,EAAMC,IAAN,KAAe;AAC/C,iDAAuBa,gBAAvB,CAAwCd,GAAxC,EAA6CC,IAA7C;AACD,CAFD;AAGA;AACAV,IAAIwB,MAAJ,CAAW,IAAX,EAAiB,MAAM;AACrBC,UAAQC,GAAR,CAAY,wCAAZ;AACD,CAFD","file":"server.js","sourcesContent":["//imports\nimport { ResearchOutputController } from './controllers/researchOutputController';\nimport { UserController } from './controllers/userController';\nimport { LoginController } from './controllers/loginController';\nimport { NodeController } from './controllers/nodeController';\nimport { GlobalAdminController } from './controllers/globalAdminController';\nimport { RecyclingBinController } from './controllers/recyclingBinController';\n//other required modules\nconst express = require('express'); //for converting circular objects to json\nconst cors = require('cors'); //cross-site orign\nconst bodyParser = require('body-parser');\n\nconst app = express(); //express app\n//middlewares\napp.use(express.static('public')); //serve static files\napp.use(cors()); //enables all cors requests\n\nconst corsOptions = {\n    origin: 'http://localhost:8080',\n    optionsSuccessStatus: 200 // some legacy browsers (IE11, various SmartTVs) choke on 204\n};\nconst jsonParser = bodyParser.json(); //process json post request's body\n//==============================================================================\n                            ///routes\n//==============================================================================\n\n// 1.get basic research_outputs\napp.get('/basic-research-outputs', cors(corsOptions),\n(req, resp) => { //returns all research outputs.\n  ResearchOutputController.getBasic(req, resp);\n});\n// 2. get research_output given the id\napp.get('/basic-research-output/:id',\n(req, resp) => {\n  ResearchOutputController.getBasicById(req, resp);\n});\n// 3. Create a new research output.\napp.post('/outputs', jsonParser, (req, resp) => {\n  ResearchOutputController.saveResearchOutput(req, resp);\n});\n\n// 4. Delete a research output by id.\napp.get('/delete_research/:id',\n(req, resp) => {\n  ResearchOutputController.deleteById(req, resp);\n});\n// 5. get all users\napp.get('/get-users', (req, resp) => {\n  UserController.getUsers(req, resp);\n});\napp.get('/get-authors', (req, resp) => {\n  UserController.getAuthors(req, resp);\n});\n// 6. login\napp.post('/login', jsonParser, (req, resp) => {\n  LoginController.loginUser(req, resp);\n});\napp.post('/create-node', jsonParser, (req, resp) => {\n  NodeController.saveNode(req, resp);\n});\n//7. Returns all the details of the research\napp.get('/detailed-research-output/:id',\n(req, resp) => {\n  ResearchOutputController.getDetailedInformation(req, resp);\n});\n//8. Create new account\napp.post('/create-account', jsonParser, (req, resp) => {\n  GlobalAdminController.createMember(req, resp);\n});\n//.9 For user to view all their researches on the recycling bin\napp.get('/user-recycling-bin/:id', (req, resp) => {\n  RecyclingBinController.userRecyclingBin(req, resp);\n});\n// 10. retrieve a research from the bin for a research with given ro_id\napp.get('/retrieve-research/:id', (req, resp) => {\n  RecyclingBinController.retrieveResearch(req, resp);\n});\n//start the server on port 3000\napp.listen(3000, () => {\n  console.log('server started: listening at port:3000');\n});\n"]}